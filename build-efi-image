#!/bin/bash

set -e

name="$(basename ${0})"

: ${TOP_DIR:="$( cd "$( dirname "${BASH_SOURCE[0]}" )/" && pwd )"}

usage () {
	echo "${name} - Build Petitboot UEFI disk image." >&2
	echo "Usage: ${name} [flags]" >&2
	echo "Option flags:" >&2
	echo "  -c --clean        - Clean up old mount." >&2
	echo "  -d --dry-run      - Do not run commands." >&2
	echo "  -f --fresh        - Build from scratch." >&2
	echo "  -g --debug        - Debug mode." >&2
	echo "  -h --help         - Show this help and exit." >&2
	echo "  -v --verbose      - Verbose mode." >&2
}

short_opts="cdfghv"
long_opts="clean,dry-run,fresh,debug,help,verbose"

opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${name}" -- "$@")

if [[ ! $? ]]; then
	echo "${name}: ERROR: Internal error: getopt." >&2
	exit 1
fi

eval set -- "${opts}"

while true ; do
	case "${1}" in
	-c | --clean)
		clean=1
		shift
		;;
	-f | --fresh)
		fresh=1
		shift
		;;
	-d | --dry-run)
		dry_run=1
		shift
		;;
	-g | --debug)
		set -x
		verbose=1
		debug=1
		shift
		;;
	-h | --help)
		help=1
		shift
		;;
	-v | --verbose)
		verbose=1
		shift
		;;
	:)
		[[ -z ${debug} ]] || echo "GOT ':': 1=@${1}@ 2=@${2}@"
		echo "${name}: ERROR: Got ':'." >&2
		exit 1
		;;
	--)
		[[ -z ${debug} ]] || echo "GOT '--': 1=@${1}@ 2=@${2}@"
		shift
		while [[ -n ${1} ]]; do
			[[ -z ${debug} ]] || echo "ADD: 1=@${1}@ 2=@${2}@"
			args="${args} ${1}"
			shift
		done
		if [[ -n "${args}" ]]; then
			echo "${name}: ERROR: Got extra args '${args}'." >&2
			exit 1
		fi
		break
		;;
	*)
		echo "${name}: ERROR: Internal error: args: '${@}'." >&2
		exit 1
		;;
	esac
done

work="$(pwd)"
mount="${work}/cow-mount"
disk_image="${work}/pb.qcow2"

cleanup () {
	set +e
	echo "unmounting..." >&2
	sudo umount ${mount}
	sudo qemu-nbd --disconnect /dev/nbd0
}

if [[ -n ${help} ]]; then
	usage
	exit 0
fi

if [[ -n ${clean} ]]; then
	cleanup
	exit 0
fi

run_cmd () {
	local cmd="${*}"

	if [[ -n ${verbose} || -n "${dry_run}" ]]; then
		echo "==> ${cmd}"
	fi
	if [[ -n "${dry_run}" ]]; then
		true
	else
		eval "${cmd}"
	fi
}

br_image="/home/geoff/projects/builds/buildroot/arm64/images/Image"

url="https://alpha.release.core-os.net/arm64-usr/current"
efi_code="coreos_production_qemu_uefi_efi_code.fd"
efi_vars="coreos_production_qemu_uefi_efi_vars.fd"
arm64_kernel="coreos_production_pxe.vmlinuz"
arm64_initrd="coreos_production_pxe_image.cpio.gz"

down_load () {
	[[ -e ${efi_code} ]] || run_cmd "wget ${url}/${efi_code}"
	[[ -e ${efi_vars} ]] || run_cmd "wget ${url}/${efi_vars}"
	[[ -e ${arm64_kernel} ]] || run_cmd "wget ${url}/${arm64_kernel}"
	[[ -e ${arm64_initrd} ]] || run_cmd "wget ${url}/${arm64_initrd}"
}


kboot_conf="
default=linux-http
linux-http=${url}/${arm64_kernel} initrd=${url}/${arm64_initrd} coreos.autologin
linux-hd=/boot/${arm64_kernel} initrd=/boot/${arm64_initrd} coreos.autologin
"

down_load

[[ -z ${fresh} ]] || run_cmd "rm -f ${disk_image}"

if [[ ! -e ${disk_image} ]]; then
	fresh=1
	run_cmd "qemu-img create -f qcow2 ${disk_image} 4G"
fi

trap cleanup EXIT

sudo modprobe nbd max_part=1
sudo qemu-nbd --connect=/dev/nbd0 ${disk_image}

[[ -z ${fresh} ]] || run_cmd "sudo mkfs.vfat /dev/nbd0"

mkdir -p ${mount}
sudo mount /dev/nbd0 ${mount} -o rw,uid=$(id -u),gid=$(id -g)

run_cmd "mkdir -p ${mount}/EFI/boot/"
run_cmd "cp ${br_image} ${mount}/EFI/boot/bootaa64.efi"

run_cmd "mkdir -p ${mount}/debug/"
#run_cmd "cp -v /home/geoff/projects/builds/buildroot/arm64/build/petitboot-master/discover/pb-discover ${mount}/debug/"

if [[ -n ${fresh} ]]; then
	run_cmd "mkdir -p ${mount}/boot/"
	run_cmd "cp -v ${arm64_kernel} ${mount}/boot/"
	run_cmd "cp -v ${arm64_initrd} ${mount}/boot/"
	run_cmd "echo \"${kboot_conf}\" > ${mount}/boot/kboot.conf"
fi

echo "----------" >&2
echo "Files:" >&2
find ${mount} -type f >&2
echo "----------" >&2

trap - EXIT

cleanup

echo "" >&2
echo "Examples:" >&2

echo "[1] qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine type=virt -m 4096 -nographic \
 -drive if=pflash,file=${efi_code},format=raw,readonly \
 -drive if=pflash,file=${efi_vars},format=raw \
 -netdev user,id=eth0,hostfwd=tcp::2222-:22,hostname=pb_tester \
 -device virtio-net-device,netdev=eth0 \
 -hda ${disk_image}" >&2

echo "[2] qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine type=virt -m 4096 -nographic \
 -netdev user,id=eth0,hostfwd=tcp::2222-:22,hostname=pb_tester \
 -device virtio-net-device,netdev=eth0 \
 -kernel ${br_image} \
 -hda ${disk_image}" >&2

echo "" >&2
